    #update rating incoming as (user_id, item_id, rating)   
    def _update_rating(self, user_id, item_id, rating):
        new_avg_rating = self._update_avg_rating(user_id, item_id, rating)
        
        members = list(range(0,len(self.matrix)))
        members.remove(user_id)
        for another_user_id in members:
            e,f,g = self._update_rating_terms((user_id, item_id, rating, new_avg_rating), another_user_id)
            self._update_similarities_with_terms(user_id, another_user_id, e, g, f)
        
        self.model[AVG_RATINGS_KEY][user_id] = new_avg_rating
    


    #arguments as ((user_id, item_id, new_rating, new_avg_rating ), another_user_id)
    def _update_rating_terms(self, rating, another_user_id):
        user_id, current_item_id, new_rating, new_avg_rating, another_user_avg_rating, another_user_ratings, co_rated, old_avg_rating, difference_avg, co_rated_length, another_user_rating = self._unpack_values(rating, another_user_id)
        old_user_rating = self.matrix[user_id][current_item_id]
        diff_ratings = new_rating - old_user_rating        
        #had rated
        e,f,g = 0,0,0
        if another_user_rating is not None:
            e = diff_ratings * (another_user_rating - another_user_avg_rating) - sum([ difference_avg * ( another_user_ratings[item_id] - another_user_avg_rating) for item_id in co_rated])
            f = diff_ratings**2 + 2*diff_ratings*(new_rating - new_avg_rating) + co_rated_length*difference_avg**2 - 2*sum([ difference_avg * ( self.matrix[user_id][item_id] - old_avg_rating) for item_id in co_rated])
        #hadn't rated
        else:
            e = -sum([ difference_avg * ( another_user_ratings[item_id] - another_user_avg_rating) for item_id in co_rated])
            f = co_rated_length*difference_avg**2 - 2*sum([ difference_avg * ( self.matrix[user_id][item_id] - old_avg_rating ) for item_id in co_rated ])
        
        return e,f,g


def _update_avg_rating(self, user_id, item_id, rating):
        old_user_rating = self.matrix[user_id][item_id]
        diff_ratings = rating - old_user_rating
        old_avg_rating = self.model[AVG_RATINGS_KEY][user_id]
        q = len(self.model[CO_RATED_KEY][(user_id,user_id)])
        new_avg_rating = (diff_ratings/q) + old_avg_rating
        return new_avg_rating